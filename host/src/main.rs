// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{WITHOUT_STD_ELF, WITHOUT_STD_ID};

use stdmethods::{WITH_STD_ELF, WITH_STD_ID};

use risc0_zkvm::{default_prover, ExecutorEnv};
const NO_STD: bool = true;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let n: u32 = 1050;
    let nums: Vec<u32> = (0..n).collect();
    let expected_sum = nums.iter().sum::<u32>();
    let mut env = ExecutorEnv::builder();

    // Obtain the default prover.
    let prover = default_prover();

    let receipt = if NO_STD {
        env.write(&n).unwrap();
        for num in nums {
            env.write(&num).unwrap();
        }
        let env = env.build().unwrap();
        let receipt = prover.prove_elf(env, WITHOUT_STD_ELF).unwrap();
        receipt.verify(WITHOUT_STD_ID).unwrap();
        println!("Image ID: {:?}", WITHOUT_STD_ID);
        receipt
    } else {
        env.write(&nums).unwrap();
        let env = env.build().unwrap();
        let receipt = prover.prove_elf(env, WITH_STD_ELF).unwrap();
        receipt.verify(WITH_STD_ID).unwrap();
        println!("Image ID: {:?}", WITH_STD_ID);
        receipt
    };

    // For example:
    let output: u32 = receipt.journal.decode().unwrap();
    assert_eq!(output, expected_sum);
  
}
